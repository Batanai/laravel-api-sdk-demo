/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Todo API
 * API documentation for Todo management
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ApiTodosBody
 */
export interface ApiTodosBody {
    /**
     * 
     * @type {string}
     * @memberof ApiTodosBody
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ApiTodosBody
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * 
     * @type {number}
     * @memberof Todo
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof Todo
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Todo
     */
    updatedAt?: Date;
}
/**
 * 
 * @export
 * @interface TodosIdBody
 */
export interface TodosIdBody {
    /**
     * 
     * @type {string}
     * @memberof TodosIdBody
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof TodosIdBody
     */
    description?: string;
}
/**
 * TodosApi - fetch parameter creator
 * @export
 */
export const TodosApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a specific todo
         * @summary Delete a todo
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTodo.');
            }
            const localVarPath = `/api/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single todo
         * @summary Get a specific todo
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoById(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTodoById.');
            }
            const localVarPath = `/api/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of todos
         * @summary Get list of todos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodosList(options: any = {}): FetchArgs {
            const localVarPath = `/api/todos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores a new todo in the database
         * @summary Create a new todo
         * @param {ApiTodosBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeTodo(body: ApiTodosBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling storeTodo.');
            }
            const localVarPath = `/api/todos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApiTodosBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing todo
         * @summary Update a todo
         * @param {TodosIdBody} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(body: TodosIdBody, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTodo.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTodo.');
            }
            const localVarPath = `/api/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TodosIdBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodosApi - functional programming interface
 * @export
 */
export const TodosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a specific todo
         * @summary Delete a todo
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TodosApiFetchParamCreator(configuration).deleteTodo(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single todo
         * @summary Get a specific todo
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoById(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Todo> {
            const localVarFetchArgs = TodosApiFetchParamCreator(configuration).getTodoById(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of todos
         * @summary Get list of todos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodosList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Todo>> {
            const localVarFetchArgs = TodosApiFetchParamCreator(configuration).getTodosList(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Stores a new todo in the database
         * @summary Create a new todo
         * @param {ApiTodosBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeTodo(body: ApiTodosBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Todo> {
            const localVarFetchArgs = TodosApiFetchParamCreator(configuration).storeTodo(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an existing todo
         * @summary Update a todo
         * @param {TodosIdBody} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(body: TodosIdBody, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Todo> {
            const localVarFetchArgs = TodosApiFetchParamCreator(configuration).updateTodo(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TodosApi - factory interface
 * @export
 */
export const TodosApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Deletes a specific todo
         * @summary Delete a todo
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(id: number, options?: any) {
            return TodosApiFp(configuration).deleteTodo(id, options)(fetch, basePath);
        },
        /**
         * Returns a single todo
         * @summary Get a specific todo
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoById(id: number, options?: any) {
            return TodosApiFp(configuration).getTodoById(id, options)(fetch, basePath);
        },
        /**
         * Returns a list of todos
         * @summary Get list of todos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodosList(options?: any) {
            return TodosApiFp(configuration).getTodosList(options)(fetch, basePath);
        },
        /**
         * Stores a new todo in the database
         * @summary Create a new todo
         * @param {ApiTodosBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeTodo(body: ApiTodosBody, options?: any) {
            return TodosApiFp(configuration).storeTodo(body, options)(fetch, basePath);
        },
        /**
         * Updates an existing todo
         * @summary Update a todo
         * @param {TodosIdBody} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(body: TodosIdBody, id: number, options?: any) {
            return TodosApiFp(configuration).updateTodo(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * TodosApi - object-oriented interface
 * @export
 * @class TodosApi
 * @extends {BaseAPI}
 */
export class TodosApi extends BaseAPI {
    /**
     * Deletes a specific todo
     * @summary Delete a todo
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public deleteTodo(id: number, options?: any) {
        return TodosApiFp(this.configuration).deleteTodo(id, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a single todo
     * @summary Get a specific todo
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public getTodoById(id: number, options?: any) {
        return TodosApiFp(this.configuration).getTodoById(id, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of todos
     * @summary Get list of todos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public getTodosList(options?: any) {
        return TodosApiFp(this.configuration).getTodosList(options)(this.fetch, this.basePath);
    }

    /**
     * Stores a new todo in the database
     * @summary Create a new todo
     * @param {ApiTodosBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public storeTodo(body: ApiTodosBody, options?: any) {
        return TodosApiFp(this.configuration).storeTodo(body, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an existing todo
     * @summary Update a todo
     * @param {TodosIdBody} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public updateTodo(body: TodosIdBody, id: number, options?: any) {
        return TodosApiFp(this.configuration).updateTodo(body, id, options)(this.fetch, this.basePath);
    }

}
