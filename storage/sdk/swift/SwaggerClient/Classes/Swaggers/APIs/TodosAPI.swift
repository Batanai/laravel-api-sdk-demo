//
// TodosAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TodosAPI {
    /**
     Delete a todo

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTodo(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTodoWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a todo
     - DELETE /api/todos/{id}

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTodoWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/todos/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a specific todo

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTodoById(_id: Int, completion: @escaping ((_ data: Todo?,_ error: Error?) -> Void)) {
        getTodoByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a specific todo
     - GET /api/todos/{id}

     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "Milk, Bread, Cheese",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1,
  "title" : "Buy groceries"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<Todo> 
     */
    open class func getTodoByIdWithRequestBuilder(_id: Int) -> RequestBuilder<Todo> {
        var path = "/api/todos/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Todo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get list of todos

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTodosList(completion: @escaping ((_ data: [Todo]?,_ error: Error?) -> Void)) {
        getTodosListWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of todos
     - GET /api/todos

     - examples: [{contentType=application/json, example=[ {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "Milk, Bread, Cheese",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1,
  "title" : "Buy groceries"
}, {
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "Milk, Bread, Cheese",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1,
  "title" : "Buy groceries"
} ]}]

     - returns: RequestBuilder<[Todo]> 
     */
    open class func getTodosListWithRequestBuilder() -> RequestBuilder<[Todo]> {
        let path = "/api/todos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Todo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create a new todo

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeTodo(body: ApiTodosBody, completion: @escaping ((_ data: Todo?,_ error: Error?) -> Void)) {
        storeTodoWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new todo
     - POST /api/todos

     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "Milk, Bread, Cheese",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1,
  "title" : "Buy groceries"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<Todo> 
     */
    open class func storeTodoWithRequestBuilder(body: ApiTodosBody) -> RequestBuilder<Todo> {
        let path = "/api/todos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Todo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update a todo

     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTodo(body: TodosIdBody, _id: Int, completion: @escaping ((_ data: Todo?,_ error: Error?) -> Void)) {
        updateTodoWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a todo
     - PUT /api/todos/{id}

     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "Milk, Bread, Cheese",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1,
  "title" : "Buy groceries"
}}]
     - parameter body: (body)  
     - parameter _id: (path)  

     - returns: RequestBuilder<Todo> 
     */
    open class func updateTodoWithRequestBuilder(body: TodosIdBody, _id: Int) -> RequestBuilder<Todo> {
        var path = "/api/todos/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Todo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
