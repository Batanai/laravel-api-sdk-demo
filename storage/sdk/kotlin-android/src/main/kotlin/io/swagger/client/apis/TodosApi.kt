/**
 * Todo API
 * API documentation for Todo management
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ApiTodosBody
import io.swagger.client.models.Todo
import io.swagger.client.models.TodosIdBody

import io.swagger.client.infrastructure.*

class TodosApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Delete a todo
     * Deletes a specific todo
     * @param id  
     * @return void
     */
    fun deleteTodo(id: kotlin.Int): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/todos/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a specific todo
     * Returns a single todo
     * @param id  
     * @return Todo
     */
    @Suppress("UNCHECKED_CAST")
    fun getTodoById(id: kotlin.Int): Todo {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/todos/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Todo>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Todo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get list of todos
     * Returns a list of todos
     * @return kotlin.Array<Todo>
     */
    @Suppress("UNCHECKED_CAST")
    fun getTodosList(): kotlin.Array<Todo> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/todos"
        )
        val response = request<kotlin.Array<Todo>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Todo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create a new todo
     * Stores a new todo in the database
     * @param body  
     * @return Todo
     */
    @Suppress("UNCHECKED_CAST")
    fun storeTodo(body: ApiTodosBody): Todo {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/todos"
        )
        val response = request<Todo>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Todo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update a todo
     * Updates an existing todo
     * @param body  
     * @param id  
     * @return Todo
     */
    @Suppress("UNCHECKED_CAST")
    fun updateTodo(body: TodosIdBody, id: kotlin.Int): Todo {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/todos/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Todo>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Todo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
